// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registrant {
  id           String   @id @default(uuid())
  registrantId String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  username     String   @unique
  email        String   @unique
  contact      String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation("RegistrantUser")

  @@map("tblregistrant")
}

model Manager {
  id           String   @id @default(uuid())
  managerId    String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  username     String   @unique
  email        String   @unique
  contact      String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation("ManagerUser")

  @@map("tblmanager")
}

model Admin {
  id           String   @id @default(uuid())
  adminId      String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  username     String   @unique
  email        String   @unique
  contact      String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation("AdminUser")

  @@map("tbladmin")
}

model SuperAdmin {
  id           String   @id @default(uuid())
  superAdminId String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  username     String   @unique
  email        String   @unique
  contact      String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation("SuperAdminUser")

  @@map("tblsuperadmin")
}

model User {
  id                  String      @id @default(uuid())
  userId              String      @unique
  role                UserRole
  password            String
  needsPasswordChange Boolean     @default(true)
  passwordChangedAt   DateTime?
  registrantId        String?     @unique
  registrant          Registrant? @relation("RegistrantUser", fields: [registrantId], references: [registrantId])
  managerId           String?     @unique
  manager             Manager?    @relation("ManagerUser", fields: [managerId], references: [managerId])
  adminId             String?     @unique
  admin               Admin?      @relation("AdminUser", fields: [adminId], references: [adminId])
  superAdminId        String?     @unique
  superAdmin          SuperAdmin? @relation("SuperAdminUser", fields: [superAdminId], references: [superAdminId])
  teamId              Int?
  team                Team?       @relation(fields: [teamId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]

  @@unique([registrantId, managerId, adminId, superAdminId])
  @@map("tbluser")
}

model Team {
  id                   Int      @id @default(autoincrement())
  name                 String
  productOwnerUserId   String?
  projectManagerUserId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  projectTeams ProjectTeam[]
  user         User[]
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int @id @default(autoincrement())
  teamId    Int
  projectId Int

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   String // Changed from Int to String
  assignedUserId String? // Changed from Int to String

  project   Project  @relation(fields: [projectId], references: [id])
  author    User     @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee  User?    @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int    @id @default(autoincrement())
  userId String // Changed from Int to String
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById String // Changed from Int to String

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId String // Changed from Int to String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums
enum UserRole {
  REGISTRANT
  MANAGER
  ADMIN
  SUPER_ADMIN
}
