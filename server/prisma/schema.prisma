// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Developer {
  id           String  @id @default(uuid())
  developerId  String  @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  contact      String  @unique

  user      User?    @relation("DeveloperUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tbldeveloper")
}

model Manager {
  id           String  @id @default(uuid())
  managerId    String  @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  contact      String  @unique

  user      User?    @relation("ManagerUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblmanager")
}

model Admin {
  id           String  @id @default(uuid())
  adminId      String  @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  contact      String  @unique

  user      User?    @relation("AdminUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tbladmin")
}

model SuperAdmin {
  id           String  @id @default(uuid())
  superAdminId String  @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  contact      String  @unique

  user      User?    @relation("SuperAdminUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblsuperadmin")
}

model User {
  id                   String    @id @default(uuid())
  userId               String    @unique
  username             String    @unique
  email                String    @unique
  role                 UserRole
  password             String
  needsPasswordChange  Boolean   @default(true)
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  developerId          String?   @unique
  managerId            String?   @unique
  adminId              String?   @unique
  superAdminId         String?   @unique

  developer  Developer?  @relation("DeveloperUser", fields: [developerId], references: [developerId])
  manager    Manager?    @relation("ManagerUser", fields: [managerId], references: [managerId])
  admin      Admin?      @relation("AdminUser", fields: [adminId], references: [adminId])
  superAdmin SuperAdmin? @relation("SuperAdminUser", fields: [superAdminId], references: [superAdminId])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  authoredTasks  Task[]           @relation("TaskAuthor")
  assignedTasks  Task[]           @relation("TaskAssignee")
  ownedTeams     Team[]           @relation("TeamOwner")
  assignedTeams  TeamMember[]
  Project        Project[]
  Attachment     Attachment[]
  Comment        Comment[]
  TaskAssignment TaskAssignment[]

  @@unique([username, email, role, developerId, managerId, adminId, superAdminId])
  @@map("tbluser")
}

model Team {
  id          Int    @id @default(autoincrement())
  name        String
  teamOwnerId String // Must be a Manager

  owner     User     @relation("TeamOwner", fields: [teamOwnerId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members      TeamMember[]
  projectTeams ProjectTeam[]

  @@map("tblteam")
}

model TeamMember {
  id     Int    @id @default(autoincrement())
  teamId Int
  userId String // Can be a Manager or Developer

  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblteammember")
}

model Project {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  projectOwnerId String // Must be a Manager

  owner     User     @relation(fields: [projectOwnerId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks        Task[]
  projectTeams ProjectTeam[]

  @@map("tblproject")
}

model ProjectTeam {
  id        Int @id @default(autoincrement())
  projectId Int
  teamId    Int

  project   Project  @relation(fields: [projectId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, teamId]) // Prevent duplicate project-team associations
  @@map("tblprojectteam")
}

model Task {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  status         TaskStatus?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   String // Must be a Manager or Developer
  assignedUserId String? // Usually a Developer

  project   Project  @relation(fields: [projectId], references: [id])
  author    User     @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee  User?    @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attachments    Attachment[]
  comments       Comment[]
  TaskAssignment TaskAssignment[]

  @@map("tbltask")
}

model TaskAssignment {
  id         Int        @id @default(autoincrement())
  taskId     Int
  userId     String // Can be a Developer or Manager
  assignedAt DateTime   @default(now())
  status     TaskStatus // e.g. "to-do", "work-in-progress", "completed"
  dueDate    DateTime?

  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tbltaskassignment")
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById String // Must be a Manager or Developer

  task       Task     @relation(fields: [taskId], references: [id])
  uploadedBy User     @relation(fields: [uploadedById], references: [userId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tblattachment")
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId String // Must be a Manager or Developer

  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tblcomment")
}

// Enums
enum UserRole {
  DEVELOPER
  MANAGER
  ADMIN
  SUPER_ADMIN
}

enum TaskStatus {
  TO_DO
  WORK_IN_PROGRESS
  COMPLETED
}
